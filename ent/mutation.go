// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"entgo.io/ent"
	"github.com/tmc/moderncrud/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeWidget     = "Widget"
	TypeWidgetType = "WidgetType"
)

// WidgetMutation represents an operation that mutates the Widget nodes in the graph.
type WidgetMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Widget, error)
	predicates    []predicate.Widget
}

var _ ent.Mutation = (*WidgetMutation)(nil)

// widgetOption allows management of the mutation configuration using functional options.
type widgetOption func(*WidgetMutation)

// newWidgetMutation creates new mutation for the Widget entity.
func newWidgetMutation(c config, op Op, opts ...widgetOption) *WidgetMutation {
	m := &WidgetMutation{
		config:        c,
		op:            op,
		typ:           TypeWidget,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWidgetID sets the ID field of the mutation.
func withWidgetID(id int) widgetOption {
	return func(m *WidgetMutation) {
		var (
			err   error
			once  sync.Once
			value *Widget
		)
		m.oldValue = func(ctx context.Context) (*Widget, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Widget.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWidget sets the old Widget of the mutation.
func withWidget(node *Widget) widgetOption {
	return func(m *WidgetMutation) {
		m.oldValue = func(context.Context) (*Widget, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WidgetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WidgetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WidgetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Where appends a list predicates to the WidgetMutation builder.
func (m *WidgetMutation) Where(ps ...predicate.Widget) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WidgetMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Widget).
func (m *WidgetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WidgetMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WidgetMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WidgetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Widget field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WidgetMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Widget field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WidgetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WidgetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WidgetMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Widget numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WidgetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WidgetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WidgetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Widget nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WidgetMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Widget field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WidgetMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WidgetMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WidgetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WidgetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WidgetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WidgetMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WidgetMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Widget unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WidgetMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Widget edge %s", name)
}

// WidgetTypeMutation represents an operation that mutates the WidgetType nodes in the graph.
type WidgetTypeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*WidgetType, error)
	predicates    []predicate.WidgetType
}

var _ ent.Mutation = (*WidgetTypeMutation)(nil)

// widgettypeOption allows management of the mutation configuration using functional options.
type widgettypeOption func(*WidgetTypeMutation)

// newWidgetTypeMutation creates new mutation for the WidgetType entity.
func newWidgetTypeMutation(c config, op Op, opts ...widgettypeOption) *WidgetTypeMutation {
	m := &WidgetTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeWidgetType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWidgetTypeID sets the ID field of the mutation.
func withWidgetTypeID(id int) widgettypeOption {
	return func(m *WidgetTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *WidgetType
		)
		m.oldValue = func(ctx context.Context) (*WidgetType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WidgetType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWidgetType sets the old WidgetType of the mutation.
func withWidgetType(node *WidgetType) widgettypeOption {
	return func(m *WidgetTypeMutation) {
		m.oldValue = func(context.Context) (*WidgetType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WidgetTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WidgetTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WidgetTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Where appends a list predicates to the WidgetTypeMutation builder.
func (m *WidgetTypeMutation) Where(ps ...predicate.WidgetType) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WidgetTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (WidgetType).
func (m *WidgetTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WidgetTypeMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WidgetTypeMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WidgetTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown WidgetType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WidgetTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WidgetType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WidgetTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WidgetTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WidgetTypeMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown WidgetType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WidgetTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WidgetTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WidgetTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WidgetType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WidgetTypeMutation) ResetField(name string) error {
	return fmt.Errorf("unknown WidgetType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WidgetTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WidgetTypeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WidgetTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WidgetTypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WidgetTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WidgetTypeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WidgetTypeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown WidgetType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WidgetTypeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown WidgetType edge %s", name)
}
